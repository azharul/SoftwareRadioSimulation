% pllconverge.m simulate costas loop% input rsc from pulrecsig.mclcclear allclose allenglish_text = 'S M Azharul';m = letters_to_pam4(english_text);N=length(m); M=20; Ts=1/N;            % no. symbols, oversampling factortime=Ts*(N*M-1); t=0:Ts-1:time;       % sampling interval and time vectors% m=pam(N,4,5);                       % 4-level signal of length Nmup=zeros(1,N*M); mup(1:M:end)=m;   % oversample by integer length Mps=hamming(M);                      % blip pulse of width Ms=filter(ps,1,mup);                 % convolve pulse shape with dataf0=1000; phoff=-1;                % carrier freq. and phasec=cos(2*pi*f0*t+phoff);             % construct carrierrsc=s.*c; r=rsc;                                    % rsc is from pulrecsig.m fl=500; ff=[0 .01 .02 1]; fa=[1 1 0 0];   h=remez(fl,ff,fa);                        % LPF designmu=.0005;                                  % algorithm stepsizefc=1000;                                  % assumed freq. at receivertheta=zeros(1,length(t)); theta(1)=0;     % initialize estimate vectortheta2=zeros(1,length(t)); theta2(1)=0;     % initialize estimate vectortheta_sum=zeros(1,length(t));zs=zeros(1,fl+1); zc=zeros(1,fl+1);       % initialize buffers for LPFsfor k=1:length(t)-1                       % z's contain past fl+1 inputs  zs=[zs(2:fl+1), 2*r(k)*sin(2*pi*fc*t(k)+theta(k))];  zc=[zc(2:fl+1), 2*r(k)*cos(2*pi*fc*t(k)+theta(k))];  lpfs=fliplr(h)*zs'; lpfc=fliplr(h)*zc'; % new output of filters  theta(k+1)=theta(k)-mu*lpfs*lpfc;       % algorithm update  zs=[zs(2:fl+1), 2*r(k)*sin(2*pi*fc*t(k)+theta(k)+theta2(k))];  zc=[zc(2:fl+1), 2*r(k)*cos(2*pi*fc*t(k)+theta(k)+theta2(k))];  lpfs=fliplr(h)*zs'; lpfc=fliplr(h)*zc'; % new output of filters  theta2(k+1)=theta2(k)-mu*lpfs*lpfc;       % algorithm updateendtheta_sum = -(theta(2:end)+theta2(2:end));plot(t,theta_sum),title('Phase Tracking via the Costas Loop(mu=.003)')xlabel('time'); ylabel('phase offset')